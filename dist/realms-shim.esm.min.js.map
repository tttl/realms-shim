{"version":3,"file":"realms-shim.esm.min.js","sources":["../src/utilities.js","../src/childRealm.js","../src/callAndWrapError.js","../src/commons.js","../src/stdlib.js","../src/repair/accessors.js","../src/repair/functions.js","../src/unsafeRec.js","../src/optimizer.js","../src/scopeHandler.js","../src/safeEval.js","../src/safeFunction.js","../src/transforms.js","../src/sourceParser.js","../src/evaluators.js","../src/realm.js"],"sourcesContent":["// we'd like to abandon, but we can't, so just scream and break a lot of\n// stuff. However, since we aren't really aborting the process, be careful to\n// not throw an Error object which could be captured by child-Realm code and\n// used to access the (too-powerful) primal-realm Error object.\n\nexport function throwTantrum(s, err = undefined) {\n  const msg = `please report internal shim error: ${s}`;\n\n  // we want to log these 'should never happen' things.\n  // eslint-disable-next-line no-console\n  console.error(msg);\n  if (err) {\n    // eslint-disable-next-line no-console\n    console.error(`${err}`);\n    // eslint-disable-next-line no-console\n    console.error(`${err.stack}`);\n  }\n\n  // eslint-disable-next-line no-debugger\n  debugger;\n  throw msg;\n}\n\nexport function assert(condition, message) {\n  if (!condition) {\n    throwTantrum(message);\n  }\n}\n\n/**\n * safeStringifyFunction()\n * Remove code modifications introduced by ems and nyx in\n * test mode which intefere with Function.toString().\n */\nexport function safeStringifyFunction(fn) {\n  let src = `'use strict'; (${fn})`;\n\n  // esm module creates \"runtime\" as \"_\" + hex(3) + \"\\u200D\"\n\n  // Restore eval which is modified by esm module.\n  // (0, eval) => (0, <runtime>.e)\n  src = src.replace(/\\(0,\\s*_[0-9a-fA-F]{3}\\u200D\\.e\\)/g, '(0, eval)');\n\n  // Restore globals such as Reflect which are modified by esm module.\n  // Reflect => <runtime>.e.Reflect\n  src = src.replace(/_[0-9a-fA-F]{3}\\u200D\\.g\\./g, '');\n\n  // Remove code coverage which is injected by nyc module.\n  src = src.replace(/cov_[^+]+\\+\\+[;,]/g, '');\n\n  return src;\n}\n","import { safeStringifyFunction } from './utilities';\n\n// buildChildRealm is immediately turned into a string, and this function is\n// never referenced again, because it closes over the wrong intrinsics\n\nexport function buildChildRealm(unsafeRec, BaseRealm) {\n  const { callAndWrapError } = unsafeRec;\n  const {\n    initRootRealm,\n    initCompartment,\n    getRealmGlobal,\n    realmEvaluate\n  } = BaseRealm;\n\n  const { create, defineProperties } = Object;\n\n  class Realm {\n    constructor() {\n      // The Realm constructor is not intended to be used with the new operator\n      // or to be subclassed. It may be used as the value of an extends clause\n      // of a class definition but a super call to the Realm constructor will\n      // cause an exception.\n\n      // When Realm is called as a function, an exception is also raised because\n      // a class constructor cannot be invoked without 'new'.\n      throw new TypeError('Realm is not a constructor');\n    }\n\n    static makeRootRealm(options = {}) {\n      // This is the exposed interface.\n\n      // Bypass the constructor.\n      const r = create(Realm.prototype);\n      callAndWrapError(initRootRealm, [unsafeRec, r, options]);\n      return r;\n    }\n\n    static makeCompartment(options = {}) {\n      // Bypass the constructor.\n      const r = create(Realm.prototype);\n      callAndWrapError(initCompartment, [unsafeRec, r, options]);\n      return r;\n    }\n\n    // we omit the constructor because it is empty. All the personalization\n    // takes place in one of the two static methods,\n    // makeRootRealm/makeCompartment\n\n    get global() {\n      // this is safe against being called with strange 'this' because\n      // baseGetGlobal immediately does a trademark check (it fails unless\n      // this 'this' is present in a weakmap that is only populated with\n      // legitimate Realm instances)\n      return callAndWrapError(getRealmGlobal, [this]);\n    }\n\n    evaluate(x, endowments, options = {}) {\n      // safe against strange 'this', as above\n      return callAndWrapError(realmEvaluate, [this, x, endowments, options]);\n    }\n  }\n\n  defineProperties(Realm, {\n    toString: {\n      value: () => 'function Realm() { [shim code] }',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  defineProperties(Realm.prototype, {\n    toString: {\n      value: () => '[object Realm]',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  return Realm;\n}\n\n// The parentheses means we don't bind the 'buildChildRealm' name inside the\n// child's namespace. this would accept an anonymous function declaration.\n// function expression (not a declaration) so it has a completion value.\nexport const buildChildRealmString = safeStringifyFunction(buildChildRealm);\n","import { safeStringifyFunction } from './utilities';\n\nfunction buildCallAndWrapError() {\n  // This Object and Reflect are brand new, from a new unsafeRec, so no user\n  // code has been run or had a chance to manipulate them. Don't ever run this\n  // function *after* user code has had a chance to pollute its environment,\n  // or it could be used to gain access to BaseRealm and primal-realm Error\n  // objects.\n  const { getPrototypeOf } = Object;\n  const { apply } = Reflect;\n  const uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n  const mapGet = uncurryThis(Map.prototype.get);\n  const setHas = uncurryThis(Set.prototype.has);\n\n  const errorNameToErrorConstructor = new Map([\n    ['EvalError', EvalError],\n    ['RangeError', RangeError],\n    ['ReferenceError', ReferenceError],\n    ['SyntaxError', SyntaxError],\n    ['TypeError', TypeError],\n    ['URIError', URIError]\n  ]);\n  const errorConstructors = new Set([\n    EvalError.prototype,\n    RangeError.prototype,\n    ReferenceError.prototype,\n    SyntaxError.prototype,\n    TypeError.prototype,\n    URIError.prototype,\n    Error.prototype\n  ]);\n\n  function callAndWrapError(target, args) {\n    try {\n      return apply(target, undefined, args);\n    } catch (err) {\n      // 1. Thrown primitives\n      if (Object(err) !== err) {\n        // err is a primitive value, which is safe to rethrow\n        throw err;\n      }\n\n      // 2. Current realm errors\n      if (setHas(errorConstructors, getPrototypeOf(err))) {\n        // err is a from the current realm, which is safe to rethrow.\n        // Object instances (normally) only contain intrinsics from the\n        // same realm. An error containing intrinsics from different\n        // realms would have to be manually constucted, which imply that\n        // such intrinsics were available, and confinement was already lost.\n        throw err;\n      }\n\n      // 3. Other realm errors\n      let eName, eMessage, eStack;\n      try {\n        // The other environment might seek to use 'err' to reach the\n        // parent's intrinsics and corrupt them. In addition, exceptions\n        // raised in the primal realm need to be converted to the current\n        // realm.\n\n        // `${err.name}` will cause string coercion of 'err.name'.\n        // If err.name is an object (probably a String of another Realm),\n        // the coercion uses err.name.toString(), which is under the control\n        // of the other realm. If err.name were a primitive (e.g. a number),\n        // it would use Number.toString(err.name), using the child's version\n        // of Number (which the child could modify to capture its argument for\n        // later use), however primitives don't have properties like .prototype\n        // so they aren't useful for an attack.\n        eName = `${err.name}`;\n        eMessage = `${err.message}`;\n        eStack = `${err.stack || eMessage}`;\n        // eName/eMessage/eStack are now realm-independent primitive strings, and\n        // safe to expose.\n      } catch (ignored) {\n        // if err.name.toString() throws, keep the (parent realm) Error away.\n        throw new Error('unknown error');\n      }\n      const ErrorConstructor =\n        mapGet(errorNameToErrorConstructor, eName) || Error;\n      try {\n        throw new ErrorConstructor(eMessage);\n      } catch (err2) {\n        err2.stack = eStack; // replace with the captured inner stack\n        throw err2;\n      }\n    }\n  }\n\n  return callAndWrapError;\n}\n\nexport const buildCallAndWrapErrorString = safeStringifyFunction(\n  buildCallAndWrapError\n);\n","// Declare shorthand functions. Sharing these declarations across modules\n// improves both consistency and minification. Unused declarations are\n// dropped by the tree shaking process.\n\n// we capture these, not just for brevity, but for security. If any code\n// modifies Object to change what 'assign' points to, the Realm shim would be\n// corrupted.\n\nexport const {\n  assign,\n  create,\n  freeze,\n  defineProperties, // Object.defineProperty is allowed to fail\n  // silentlty, use Object.defineProperties instead.\n  getOwnPropertyDescriptor,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  getPrototypeOf,\n  setPrototypeOf\n} = Object;\n\nexport const {\n  apply,\n  ownKeys // Reflect.ownKeys includes Symbols and unenumerables,\n  // unlike Object.keys()\n} = Reflect;\n\n/**\n * uncurryThis() See\n * http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n * which only lives at\n * http://web.archive.org/web/20160805225710/http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n *\n * Performance:\n * 1. The native call is about 10x faster on FF than chrome\n * 2. The version using Function.bind() is about 100x slower on FF,\n *    equal on chrome, 2x slower on Safari\n * 3. The version using a spread and Reflect.apply() is about 10x\n *    slower on FF, equal on chrome, 2x slower on Safari\n *\n * const bind = Function.prototype.bind;\n * const uncurryThis = bind.bind(bind.call);\n */\nconst uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n\n// We also capture these for security: changes to Array.prototype after the\n// Realm shim runs shouldn't affect subsequent Realm operations.\nexport const objectHasOwnProperty = uncurryThis(\n    Object.prototype.hasOwnProperty\n  ),\n  arrayForEach = uncurryThis(Array.prototype.forEach),\n  arrayFilter = uncurryThis(Array.prototype.filter),\n  arrayPush = uncurryThis(Array.prototype.push),\n  arrayPop = uncurryThis(Array.prototype.pop),\n  arrayJoin = uncurryThis(Array.prototype.join),\n  arrayConcat = uncurryThis(Array.prototype.concat),\n  regexpTest = uncurryThis(RegExp.prototype.test),\n  stringMatch = uncurryThis(String.prototype.match),\n  stringIncludes = uncurryThis(String.prototype.includes);\n","import { getOwnPropertyDescriptor } from './commons';\nimport { assert } from './utilities';\n\n// These value properties of the global object are non-writable,\n// non-configurable data properties.\nconst frozenGlobalPropertyNames = [\n  // *** 18.1 Value Properties of the Global Object\n\n  'Infinity',\n  'NaN',\n  'undefined'\n];\n\n// All the following stdlib items have the same name on both our intrinsics\n// object and on the global object. Unlike Infinity/NaN/undefined, these\n// should all be writable and configurable. This is divided into two\n// sets. The stable ones are those the shim can freeze early because\n// we don't expect anyone will want to mutate them. The unstable ones\n// are the ones that we correctly initialize to writable and\n// configurable so that they can still be replaced or removed.\nconst stableGlobalPropertyNames = [\n  // *** 18.2 Function Properties of the Global Object\n\n  // 'eval', // comes from safeEval instead\n  'isFinite',\n  'isNaN',\n  'parseFloat',\n  'parseInt',\n\n  'decodeURI',\n  'decodeURIComponent',\n  'encodeURI',\n  'encodeURIComponent',\n\n  // *** 18.3 Constructor Properties of the Global Object\n\n  'Array',\n  'ArrayBuffer',\n  'Boolean',\n  'DataView',\n  // 'Date',  // Unstable\n  // 'Error',  // Unstable\n  'EvalError',\n  'Float32Array',\n  'Float64Array',\n  // 'Function',  // comes from safeFunction instead\n  'Int8Array',\n  'Int16Array',\n  'Int32Array',\n  'Map',\n  'Number',\n  'Object',\n  // 'Promise',  // Unstable\n  // 'Proxy',  // Unstable\n  'RangeError',\n  'ReferenceError',\n  // 'RegExp',  // Unstable\n  'Set',\n  // 'SharedArrayBuffer'  // removed on Jan 5, 2018\n  'String',\n  'Symbol',\n  'SyntaxError',\n  'TypeError',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Uint16Array',\n  'Uint32Array',\n  'URIError',\n  'WeakMap',\n  'WeakSet',\n\n  // *** 18.4 Other Properties of the Global Object\n\n  // 'Atomics', // removed on Jan 5, 2018\n  'JSON',\n  'Math',\n  'Reflect',\n\n  // *** Annex B\n\n  'escape',\n  'unescape'\n\n  // *** ECMA-402\n\n  // 'Intl'  // Unstable\n\n  // *** ESNext\n\n  // 'Realm' // Comes from createRealmGlobalObject()\n];\n\nconst unstableGlobalPropertyNames = [\n  'Date',\n  'Error',\n  'Promise',\n  'Proxy',\n  'RegExp',\n  'Intl'\n];\n\nexport function getSharedGlobalDescs(\n  unsafeGlobal,\n  configurableGlobals = false\n) {\n  const descriptors = {};\n\n  function describe(names, writable, enumerable, configurable) {\n    for (const name of names) {\n      const desc = getOwnPropertyDescriptor(unsafeGlobal, name);\n      if (desc) {\n        // Abort if an accessor is found on the unsafe global object\n        // instead of a data property. We should never get into this\n        // non standard situation.\n        assert(\n          'value' in desc,\n          `unexpected accessor on global property: ${name}`\n        );\n\n        descriptors[name] = {\n          value: desc.value,\n          writable,\n          enumerable,\n          configurable\n        };\n      }\n    }\n  }\n\n  if (configurableGlobals) {\n    describe(frozenGlobalPropertyNames, true, false, true);\n    // The following is correct but expensive.\n    describe(stableGlobalPropertyNames, true, false, true);\n  } else {\n    // Instead, for now, we let these get optimized.\n    describe(frozenGlobalPropertyNames, false, false, false);\n    describe(stableGlobalPropertyNames, false, false, false);\n  }\n  // These we keep replaceable and removable, because we expect\n  // others, e.g., SES, may want to do so.\n  describe(unstableGlobalPropertyNames, true, false, true);\n\n  return descriptors;\n}\n","// Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * Replace the legacy accessors of Object to comply with strict mode\n * and ES2016 semantics, we do this by redefining them while in 'use strict'.\n *\n * todo: list the issues resolved\n *\n * This function can be used in two ways: (1) invoked directly to fix the primal\n * realm's Object.prototype, and (2) converted to a string to be executed\n * inside each new RootRealm to fix their Object.prototypes. Evaluation requires\n * the function to have no dependencies, so don't import anything from\n * the outside.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairAccessors() {\n  const {\n    defineProperty,\n    defineProperties,\n    getOwnPropertyDescriptor,\n    getPrototypeOf,\n    prototype: objectPrototype\n  } = Object;\n\n  // On some platforms, the implementation of these functions act as\n  // if they are in sloppy mode: if they're invoked badly, they will\n  // expose the global object, so we need to repair these for\n  // security. Thus it is our responsibility to fix this, and we need\n  // to include repairAccessors. E.g. Chrome in 2016.\n\n  try {\n    // Verify that the method is not callable.\n    // eslint-disable-next-line no-restricted-properties, no-underscore-dangle\n    (0, objectPrototype.__lookupGetter__)('x');\n  } catch (ignore) {\n    // Throws, no need to patch.\n    return;\n  }\n\n  const { apply } = Reflect;\n  const uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n  // %Object.prototype.valueOf% performs:\n  // 1. Return ? ToObject(this value)\n  const toObject = uncurryThis(objectPrototype.valueOf);\n\n  function asPropertyName(obj) {\n    if (typeof obj === 'symbol') {\n      return obj;\n    }\n    return `${obj}`;\n  }\n\n  function aFunction(obj, accessor) {\n    if (typeof obj !== 'function') {\n      throw TypeError(`invalid ${accessor} usage`);\n    }\n    return obj;\n  }\n\n  // We use the the concise method syntax to create methods without\n  // a [[Construct]] internal method (such that the invocation\n  // \"new __method__()\" throws \"TypeError: __method__ is not a constructor\"),\n  // but which still accepts a 'this' binding.\n  const {\n    __defineGetter__,\n    __defineSetter__,\n    __lookupGetter__,\n    __lookupSetter__\n  } = {\n    // eslint-disable-next-line no-underscore-dangle\n    __defineGetter__(prop, func) {\n      const O = toObject(this);\n      defineProperty(O, prop, {\n        get: aFunction(func, 'getter'),\n        enumerable: true,\n        configurable: true\n      });\n    },\n\n    // eslint-disable-next-line no-underscore-dangle\n    __defineSetter__(prop, func) {\n      const O = toObject(this);\n      defineProperty(O, prop, {\n        set: aFunction(func, 'setter'),\n        enumerable: true,\n        configurable: true\n      });\n    },\n\n    // eslint-disable-next-line no-underscore-dangle\n    __lookupGetter__(prop) {\n      let O = toObject(this);\n      prop = asPropertyName(prop);\n      let desc;\n      while (O !== null && !(desc = getOwnPropertyDescriptor(O, prop))) {\n        O = getPrototypeOf(O);\n      }\n      return desc && desc.get;\n    },\n\n    // eslint-disable-next-line no-underscore-dangle\n    __lookupSetter__(prop) {\n      let O = toObject(this);\n      prop = asPropertyName(prop);\n      let desc;\n      while (O !== null && !(desc = getOwnPropertyDescriptor(O, prop))) {\n        O = getPrototypeOf(O);\n      }\n      return desc && desc.set;\n    }\n  };\n\n  defineProperties(objectPrototype, {\n    __defineGetter__: { value: __defineGetter__ },\n    __defineSetter__: { value: __defineSetter__ },\n    __lookupGetter__: { value: __lookupGetter__ },\n    __lookupSetter__: { value: __lookupSetter__ }\n  });\n}\n","// Adapted from SES/Caja\n// Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * This block replaces the original Function constructor, and the original\n * %GeneratorFunction% %AsyncFunction% and %AsyncGeneratorFunction%, with\n * safe replacements that throw if invoked.\n *\n * These are all reachable via syntax, so it isn't sufficient to just\n * replace global properties with safe versions. Our main goal is to prevent\n * access to the Function constructor through these starting points.\n\n * After this block is done, the originals must no longer be reachable, unless\n * a copy has been made, and funtions can only be created by syntax (using eval)\n * or by invoking a previously saved reference to the originals.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairFunctions() {\n  const { defineProperties, getPrototypeOf, setPrototypeOf } = Object;\n\n  /**\n   * The process to repair constructors:\n   * 1. Create an instance of the function by evaluating syntax\n   * 2. Obtain the prototype from the instance\n   * 3. Create a substitute tamed constructor\n   * 4. Replace the original constructor with the tamed constructor\n   * 5. Replace tamed constructor prototype property with the original one\n   * 6. Replace its [[Prototype]] slot with the tamed constructor of Function\n   */\n  function repairFunction(name, declaration) {\n    let FunctionInstance;\n    try {\n      // eslint-disable-next-line no-new-func\n      FunctionInstance = (0, eval)(declaration);\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        // Prevent failure on platforms where async and/or generators\n        // are not supported.\n        return;\n      }\n      // Re-throw\n      throw e;\n    }\n    const FunctionPrototype = getPrototypeOf(FunctionInstance);\n\n    // Prevents the evaluation of source when calling constructor on the\n    // prototype of functions.\n    const TamedFunction = function() {\n      throw new TypeError('Not available');\n    };\n    defineProperties(TamedFunction, { name: { value: name } });\n\n    // (new Error()).constructors does not inherit from Function, because Error\n    // was defined before ES6 classes. So we don't need to repair it too.\n\n    // (Error()).constructor inherit from Function, which gets a tamed\n    // constructor here.\n\n    // todo: in an ES6 class that does not inherit from anything, what does its\n    // constructor inherit from? We worry that it inherits from Function, in\n    // which case instances could give access to unsafeFunction. markm says\n    // we're fine: the constructor inherits from Object.prototype\n\n    // This line replaces the original constructor in the prototype chain\n    // with the tamed one. No copy of the original is peserved.\n    defineProperties(FunctionPrototype, {\n      constructor: { value: TamedFunction }\n    });\n\n    // This line sets the tamed constructor's prototype data property to\n    // the original one.\n    defineProperties(TamedFunction, {\n      prototype: { value: FunctionPrototype }\n    });\n\n    if (TamedFunction !== Function.prototype.constructor) {\n      // Ensures that all functions meet \"instanceof Function\" in a realm.\n      setPrototypeOf(TamedFunction, Function.prototype.constructor);\n    }\n  }\n\n  // Here, the order of operation is important: Function needs to be repaired\n  // first since the other repaired constructors need to inherit from the tamed\n  // Function function constructor.\n\n  // note: this really wants to be part of the standard, because new\n  // constructors may be added in the future, reachable from syntax, and this\n  // list must be updated to match.\n\n  // \"plain arrow functions\" inherit from Function.prototype\n\n  repairFunction('Function', '(function(){})');\n  repairFunction('GeneratorFunction', '(function*(){})');\n  repairFunction('AsyncFunction', '(async function(){})');\n  repairFunction('AsyncGeneratorFunction', '(async function*(){})');\n}\n","// this module must never be importable outside the Realm shim itself\nimport { buildCallAndWrapErrorString } from './callAndWrapError';\nimport { getSharedGlobalDescs } from './stdlib';\nimport { repairAccessors } from './repair/accessors';\nimport { repairFunctions } from './repair/functions';\nimport { safeStringifyFunction } from './utilities';\nimport { freeze } from './commons';\n\n// A \"context\" is a fresh unsafe Realm as given to us by existing platforms.\n// We need this to implement the shim. However, when Realms land for real,\n// this feature will be provided by the underlying engine instead.\n\n// note: in a node module, the top-level 'this' is not the global object\n// (it's *something* but we aren't sure what), however an indirect eval of\n// 'this' will be the correct global object.\n\nconst unsafeGlobalSrc = \"'use strict'; this\";\nconst unsafeGlobalEvalSrc = `(0, eval)(\"'use strict'; this\")`;\n\n// This method is only exported for testing purposes.\nexport function createNewUnsafeGlobalForNode() {\n  // Note that webpack and others will shim 'vm' including the method\n  // 'runInNewContext', so the presence of vm is not a useful check\n\n  // TODO: Find a better test that works with bundlers\n  // eslint-disable-next-line no-new-func\n  const isNode = new Function(\n    'try {return this===global}catch(e){return false}'\n  )();\n\n  if (!isNode) {\n    return undefined;\n  }\n\n  // eslint-disable-next-line global-require\n  const vm = require('vm');\n\n  // Use unsafeGlobalEvalSrc to ensure we get the right 'this'.\n  const unsafeGlobal = vm.runInNewContext(unsafeGlobalEvalSrc);\n\n  return unsafeGlobal;\n}\n\n// This method is only exported for testing purposes.\nexport function createNewUnsafeGlobalForBrowser() {\n  if (typeof document === 'undefined') {\n    return undefined;\n  }\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n\n  document.body.appendChild(iframe);\n  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);\n\n  // We keep the iframe attached to the DOM because removing it\n  // causes its global object to lose intrinsics, its eval()\n  // function to evaluate code, etc.\n\n  // TODO: can we remove and garbage-collect the iframes?\n\n  return unsafeGlobal;\n}\n\nconst getNewUnsafeGlobal = () => {\n  const newUnsafeGlobalForBrowser = createNewUnsafeGlobalForBrowser();\n  const newUnsafeGlobalForNode = createNewUnsafeGlobalForNode();\n  if (\n    (!newUnsafeGlobalForBrowser && !newUnsafeGlobalForNode) ||\n    (newUnsafeGlobalForBrowser && newUnsafeGlobalForNode)\n  ) {\n    throw new Error('unexpected platform, unable to create Realm');\n  }\n  return newUnsafeGlobalForBrowser || newUnsafeGlobalForNode;\n};\n\n// The unsafeRec is shim-specific. It acts as the mechanism to obtain a fresh\n// set of intrinsics together with their associated eval and Function\n// evaluators. These must be used as a matched set, since the evaluators are\n// tied to a set of intrinsics, aka the \"undeniables\". If it were possible to\n// mix-and-match them from different contexts, that would enable some\n// attacks.\nfunction createUnsafeRec(\n  unsafeGlobal,\n  allShims = [],\n  configurableGlobals = false\n) {\n  const sharedGlobalDescs = getSharedGlobalDescs(\n    unsafeGlobal,\n    configurableGlobals\n  );\n\n  const unsafeEval = unsafeGlobal.eval;\n  const unsafeFunction = unsafeGlobal.Function;\n  const callAndWrapError = unsafeEval(buildCallAndWrapErrorString)();\n\n  return freeze({\n    unsafeGlobal,\n    sharedGlobalDescs,\n    unsafeEval,\n    unsafeFunction,\n    callAndWrapError,\n    allShims\n  });\n}\n\nconst repairAccessorsString = safeStringifyFunction(repairAccessors);\nconst repairFunctionsString = safeStringifyFunction(repairFunctions);\n\n// Create a new unsafeRec from a brand new context, with new intrinsics and a\n// new global object\nexport function createNewUnsafeRec(allShims, configurableGlobals = false) {\n  const unsafeGlobal = getNewUnsafeGlobal();\n  const unsafeRec = createUnsafeRec(\n    unsafeGlobal,\n    allShims,\n    configurableGlobals\n  );\n  const { unsafeEval } = unsafeRec;\n  unsafeEval(repairAccessorsString)();\n  unsafeEval(repairFunctionsString)();\n  return unsafeRec;\n}\n\n// Create a new unsafeRec from the current context, where the Realm shim is\n// being parsed and executed, aka the \"Primal Realm\"\nexport function createCurrentUnsafeRec() {\n  const unsafeEval = eval;\n  const unsafeGlobal = unsafeEval(unsafeGlobalSrc);\n  repairAccessors();\n  repairFunctions();\n  return createUnsafeRec(unsafeGlobal);\n}\n","import {\n  arrayFilter,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  objectHasOwnProperty,\n  regexpTest\n} from './commons';\n\n// todo: think about how this interacts with endowments, check for conflicts\n// between the names being optimized and the ones added by endowments\n\n/**\n * Simplified validation of indentifier names: may only contain alphanumeric\n * characters (or \"$\" or \"_\"), and may not start with a digit. This is safe\n * and does not reduces the compatibility of the shim. The motivation for\n * this limitation was to decrease the complexity of the implementation,\n * and to maintain a resonable level of performance.\n * Note: \\w is equivalent [a-zA-Z_0-9]\n * See 11.6.1 Identifier Names\n */\nconst identifierPattern = /^[a-zA-Z_$][\\w$]*$/;\n\n/**\n * In JavaScript you cannot use these reserved words as variables.\n * See 11.6.1 Identifier Names\n */\nconst keywords = new Set([\n  // 11.6.2.1 Keywords\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'export',\n  'extends',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'import',\n  'in',\n  'instanceof',\n  'new',\n  'return',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield',\n\n  // Also reserved when parsing strict mode code\n  'let',\n  'static',\n\n  // 11.6.2.2 Future Reserved Words\n  'enum',\n\n  // Also reserved when parsing strict mode code\n  'implements',\n  'package',\n  'protected',\n  'interface',\n  'private',\n  'public',\n\n  // Reserved but not mentioned in specs\n  'await',\n\n  'null',\n  'true',\n  'false',\n\n  'this',\n  'arguments'\n]);\n\n/**\n * getOptimizableGlobals()\n * What variable names might it bring into scope? These include all\n * property names which can be variable names, including the names\n * of inherited properties. It excludes symbols and names which are\n * keywords. We drop symbols safely. Currently, this shim refuses\n * service if any of the names are keywords or keyword-like. This is\n * safe and only prevent performance optimization.\n */\nexport function getOptimizableGlobals(globalObject, localObject = {}) {\n  const globalNames = getOwnPropertyNames(globalObject);\n  // getOwnPropertyNames does ignore Symbols so we don't need this extra check:\n  // typeof name === 'string' &&\n  const constants = arrayFilter(globalNames, name => {\n    // Exclude globals that will be hidden behind an object positioned\n    // closer in the resolution scope chain, typically the endowments.\n    if (name in localObject) {\n      return false;\n    }\n\n    // Ensure we have a valid identifier. We use regexpTest rather than\n    // /../.test() to guard against the case where RegExp has been poisoned.\n    if (\n      name === 'eval' ||\n      keywords.has(name) ||\n      !regexpTest(identifierPattern, name)\n    ) {\n      return false;\n    }\n\n    const desc = getOwnPropertyDescriptor(globalObject, name);\n    return (\n      //\n      // The getters will not have .writable, don't let the falsyness of\n      // 'undefined' trick us: test with === false, not ! . However descriptors\n      // inherit from the (potentially poisoned) global object, so we might see\n      // extra properties which weren't really there. Accessor properties have\n      // 'get/set/enumerable/configurable', while data properties have\n      // 'value/writable/enumerable/configurable'.\n      desc.configurable === false &&\n      desc.writable === false &&\n      //\n      // Checks for data properties because they're the only ones we can\n      // optimize (accessors are most likely non-constant). Descriptors can't\n      // can't have accessors and value properties at the same time, therefore\n      // this check is sufficient. Using explicit own property deal with the\n      // case where Object.prototype has been poisoned.\n      objectHasOwnProperty(desc, 'value')\n    );\n  });\n\n  return constants;\n}\n","import { safeStringifyFunction } from './utilities';\n\n/**\n * ScopeHandler manages a Proxy which serves as the global scope for the\n * safeEvaluator operation (the Proxy is the argument of a 'with' binding).\n * As described in createSafeEvaluator(), it has several functions:\n * - allow the very first (and only the very first) use of 'eval' to map to\n *   the real (unsafe) eval function, so it acts as a 'direct eval' and can\n *    access its lexical scope (which maps to the 'with' binding, which the\n *   ScopeHandler also controls).\n * - ensure that all subsequent uses of 'eval' map to the safeEvaluator,\n *   which lives as the 'eval' property of the safeGlobal.\n * - route all other property lookups at the safeGlobal.\n * - hide the unsafeGlobal which lives on the scope chain above the 'with'.\n * - ensure the Proxy invariants despite some global properties being frozen.\n *\n * @returns {ProxyHandler<any> & Record<string, any>}\n */\nexport function buildScopeHandler(\n  unsafeRec,\n  safeGlobal,\n  endowments = {},\n  sloppyGlobals = false\n) {\n  const { unsafeGlobal, unsafeEval } = unsafeRec;\n\n  const { freeze, getOwnPropertyDescriptor } = Object;\n  const { get: reflectGet, set: reflectSet } = Reflect;\n\n  /**\n   * alwaysThrowHandler is a proxy handler which throws on any trap called.\n   * It's made from a proxy with a get trap that throws. Its target is\n   * an immutable (frozen) object and is safe to share, except accross realms\n   */\n  const alwaysThrowHandler = new Proxy(freeze({}), {\n    get(target, prop) {\n      // todo: replace with throwTantrum\n      throw new TypeError(\n        `unexpected scope handler trap called: ${String(prop)}`\n      );\n    }\n  });\n\n  return {\n    // The scope handler throws if any trap other than get/set/has are run\n    // (e.g. getOwnPropertyDescriptors, apply, getPrototypeOf).\n    // eslint-disable-next-line no-proto\n    __proto__: alwaysThrowHandler,\n\n    // This flag allow us to determine if the eval() call is an done by the\n    // realm's code or if it is user-land invocation, so we can react differently.\n    // We use a property and not an accessor to avoid increasing the stack trace\n    // and reduce the possibility of OOM.\n    useUnsafeEvaluator: false,\n\n    get(shadow, prop) {\n      if (typeof prop === 'symbol') {\n        // Safe to return a primal realm Object here because the only code that\n        // can do a get() on a non-string is the internals of with() itself,\n        // and the only thing it does is to look for properties on it. User\n        // code cannot do a lookup on non-strings.\n        return undefined;\n      }\n\n      // Special treatment for eval. The very first lookup of 'eval' gets the\n      // unsafe (real direct) eval, so it will get the lexical scope that uses\n      // the 'with' context.\n      if (prop === 'eval') {\n        // test that it is true rather than merely truthy\n        if (this.useUnsafeEvaluator === true) {\n          // revoke before use\n          this.useUnsafeEvaluator = false;\n          return unsafeEval;\n        }\n        // fall through\n      }\n\n      // Properties of the endowments.\n      if (prop in endowments) {\n        // Ensure that the 'this' value on getters resolves\n        // to the safeGlobal, not to the endowments object.\n        return reflectGet(endowments, prop, safeGlobal);\n      }\n\n      // Properties of the global.\n      return reflectGet(safeGlobal, prop);\n    },\n\n    // eslint-disable-next-line class-methods-use-this\n    set(shadow, prop, value) {\n      // Properties of the endowments.\n      if (prop in endowments) {\n        const desc = getOwnPropertyDescriptor(endowments, prop);\n        if ('value' in desc) {\n          // Work around a peculiar behavior in the specs, where\n          // value properties are defined on the receiver.\n          return reflectSet(endowments, prop, value);\n        }\n        // Ensure that the 'this' value on setters resolves\n        // to the safeGlobal, not to the endowments object.\n        return reflectSet(endowments, prop, value, safeGlobal);\n      }\n\n      // Properties of the global.\n      return reflectSet(safeGlobal, prop, value);\n    },\n\n    // we need has() to return false for some names to prevent the lookup  from\n    // climbing the scope chain and eventually reaching the unsafeGlobal\n    // object, which is bad.\n\n    // note: unscopables! every string in Object[Symbol.unscopables]\n\n    // todo: we'd like to just have has() return true for everything, and then\n    // use get() to raise a ReferenceError for anything not on the safe global.\n    // But we want to be compatible with ReferenceError in the normal case and\n    // the lack of ReferenceError in the 'typeof' case. Must either reliably\n    // distinguish these two cases (the trap behavior might be different), or\n    // we rely on a mandatory source-to-source transform to change 'typeof abc'\n    // to XXX. We already need a mandatory parse to prevent the 'import',\n    // since it's a special form instead of merely being a global variable/\n\n    // note: if we make has() return true always, then we must implement a\n    // set() trap to avoid subverting the protection of strict mode (it would\n    // accept assignments to undefined globals, when it ought to throw\n    // ReferenceError for such assignments)\n\n    has(shadow, prop) {\n      // proxies stringify 'prop', so no TOCTTOU danger here\n\n      if (sloppyGlobals) {\n        // Everything is potentially available.\n        return true;\n      }\n\n      // unsafeGlobal: hide all properties of unsafeGlobal at the\n      // expense of 'typeof' being wrong for those properties. For\n      // example, in the browser, evaluating 'document = 3', will add\n      // a property to safeGlobal instead of throwing a\n      // ReferenceError.\n      if (\n        prop === 'eval' ||\n        prop in endowments ||\n        prop in safeGlobal ||\n        prop in unsafeGlobal\n      ) {\n        return true;\n      }\n\n      return false;\n    },\n\n    // note: this is likely a bug of safari\n    // https://bugs.webkit.org/show_bug.cgi?id=195534\n\n    getPrototypeOf() {\n      return null;\n    }\n  };\n}\n\nexport const buildScopeHandlerString = safeStringifyFunction(buildScopeHandler);\n","import { safeStringifyFunction } from './utilities';\n\nfunction buildSafeEval(unsafeRec, safeEvalOperation) {\n  const { callAndWrapError } = unsafeRec;\n\n  const { defineProperties } = Object;\n\n  // We use the the concise method syntax to create an eval without a\n  // [[Construct]] behavior (such that the invocation \"new eval()\" throws\n  // TypeError: eval is not a constructor\"), but which still accepts a\n  // 'this' binding.\n  const safeEval = {\n    eval() {\n      return callAndWrapError(safeEvalOperation, arguments);\n    }\n  }.eval;\n\n  // safeEval's prototype RootRealm's value and instanceof Function\n  // is true inside the realm. It doesn't point at the primal realm\n  // value, and there is no defense against leaking primal realm\n  // intrinsics.\n\n  defineProperties(safeEval, {\n    toString: {\n      // We break up the following literal string so that an\n      // apparent direct eval syntax does not appear in this\n      // file. Thus, we avoid rejection by the overly eager\n      // rejectDangerousSources.\n      value: () => `function ${'eval'}() { [shim code] }`,\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  return safeEval;\n}\nexport const buildSafeEvalString = safeStringifyFunction(buildSafeEval);\n","import { safeStringifyFunction } from './utilities';\n\nfunction buildSafeFunction(unsafeRec, safeFunctionOperation) {\n  const { callAndWrapError, unsafeFunction } = unsafeRec;\n\n  const { defineProperties } = Object;\n\n  const safeFunction = function Function() {\n    return callAndWrapError(safeFunctionOperation, arguments);\n  };\n\n  // Ensure that Function from any compartment in a root realm can be used\n  // with instance checks in any compartment of the same root realm.\n\n  defineProperties(safeFunction, {\n    // Ensure that any function created in any compartment in a root realm is an\n    // instance of Function in any compartment of the same root ralm.\n    prototype: { value: unsafeFunction.prototype },\n\n    // Provide a custom output without overwriting the\n    // Function.prototype.toString which is called by some third-party\n    // libraries.\n    toString: {\n      value: () => 'function Function() { [shim code] }',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    }\n  });\n\n  return safeFunction;\n}\nexport const buildSafeFunctionString = safeStringifyFunction(buildSafeFunction);\n","import { safeStringifyFunction } from './utilities';\n\nexport function applyTransforms(rewriterState, transforms) {\n  const { create, getOwnPropertyDescriptors } = Object;\n  const { apply } = Reflect;\n  const uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n  const arrayReduce = uncurryThis(Array.prototype.reduce);\n\n  // Clone before calling transforms.\n  rewriterState = {\n    src: `${rewriterState.src}`,\n    endowments: create(\n      null,\n      getOwnPropertyDescriptors(rewriterState.endowments)\n    )\n  };\n\n  // Rewrite the source, threading through rewriter state as necessary.\n  rewriterState = arrayReduce(\n    transforms,\n    (rs, transform) => (transform.rewrite ? transform.rewrite(rs) : rs),\n    rewriterState\n  );\n\n  // Clone after transforms\n  rewriterState = {\n    src: `${rewriterState.src}`,\n    endowments: create(\n      null,\n      getOwnPropertyDescriptors(rewriterState.endowments)\n    )\n  };\n\n  return rewriterState;\n}\n\nexport const applyTransformsString = safeStringifyFunction(applyTransforms);\n","// https://www.ecma-international.org/ecma-262/9.0/index.html#sec-html-like-comments\n// explains that JavaScript parsers may or may not recognize html\n// comment tokens \"<\" immediately followed by \"!--\" and \"--\"\n// immediately followed by \">\" in non-module source text, and treat\n// them as a kind of line comment. Since otherwise both of these can\n// appear in normal JavaScript source code as a sequence of operators,\n// we have the terrifying possibility of the same source code parsing\n// one way on one correct JavaScript implementation, and another way\n// on another.\n//\n// This shim takes the conservative strategy of just rejecting source\n// text that contains these strings anywhere. Note that this very\n// source file is written strangely to avoid mentioning these\n// character strings explicitly.\n\n// We do not write the regexp in a straightforward way, so that an\n// apparennt html comment does not appear in this file. Thus, we avoid\n// rejection by the overly eager rejectDangerousSources.\nconst htmlCommentPattern = new RegExp(`(?:${'<'}!--|--${'>'})`);\n\nfunction rejectHtmlComments(s) {\n  const index = s.search(htmlCommentPattern);\n  if (index !== -1) {\n    const linenum = s.slice(0, index).split('\\n').length; // more or less\n    throw new SyntaxError(\n      `possible html comment syntax rejected around line ${linenum}`\n    );\n  }\n}\n\n// The proposed dynamic import expression is the only syntax currently\n// proposed, that can appear in non-module JavaScript code, that\n// enables direct access to the outside world that cannot be\n// surpressed or intercepted without parsing and rewriting. Instead,\n// this shim conservatively rejects any source text that seems to\n// contain such an expression. To do this safely without parsing, we\n// must also reject some valid programs, i.e., those containing\n// apparent import expressions in literal strings or comments.\n\n// The current conservative rule looks for the identifier \"import\"\n// followed by either an open paren or something that looks like the\n// beginning of a comment. We assume that we do not need to worry\n// about html comment syntax because that was already rejected by\n// rejectHtmlComments.\n\n// this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n// U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n// whitespace by the parser, but not matched by /\\s/, then this would admit\n// an attack like: import\\u2028('power.js') . We're trying to distinguish\n// something like that from something like importnotreally('power.js') which\n// is perfectly safe.\n\nconst importPattern = /\\bimport\\s*(?:\\(|\\/[/*])/;\n\n// Still allow JSDocs that use `import()` such as:\n// * @param {import('./foo.js').MyType}\n// * @param {typeof import('./foo.js').Obj}\n//\n// Note that this is not valid syntax outside of a comment\n// (import expressions cannot be the start of an object literal,\n// nor can decorators adorn blocks).\n//\n// Also note that the dollar at the end matches where the import begins\n// since the 's' modifier is given.\n//\n// BE CAREFUL not to use `\\s`, as that will match newlines.\nconst allowedImportPrefix = /@[a-z]+ +\\{((type|key)of +)?$/s;\n\nfunction rejectImportExpressions(s) {\n  let index = 0;\n  for (;;) {\n    // Find the next `import` string in the source.\n    const nextMatch = s.slice(index).search(importPattern);\n    if (nextMatch === -1) {\n      // Not found, the source is okay.\n      return;\n    }\n    // Advance our index to the beginning of `import`.\n    index += nextMatch;\n    // Take the source up to the match, and see if\n    // it ends in the allowed prefix.\n    if (s.slice(0, index).match(allowedImportPrefix)) {\n      // Move the search one character forward, and go again.\n      index += 1;\n      continue;\n    }\n    // It doesn't end in the allowed prefix, so reject the source entirely.\n    const linenum = s.slice(0, index).split('\\n').length; // more or less\n    throw new SyntaxError(\n      `possible import expression rejected around line ${linenum}`\n    );\n  }\n}\n\n// The shim cannot correctly emulate a direct eval as explained at\n// https://github.com/Agoric/realms-shim/issues/12\n// Without rejecting apparent direct eval syntax, we would\n// accidentally evaluate these with an emulation of indirect eval. Tp\n// prevent future compatibility problems, in shifting from use of the\n// shim to genuine platform support for the proposal, we should\n// instead statically reject code that seems to contain a direct eval\n// expression.\n//\n// As with the dynamic import expression, to avoid a full parse, we do\n// this approximately with a regexp, that will also reject strings\n// that appear safely in comments or strings. Unlike dynamic import,\n// if we miss some, this only creates future compat problems, not\n// security problems. Thus, we are only trying to catch innocent\n// occurrences, not malicious one. In particular, `(eval)(...)` is\n// direct eval syntax that would not be caught by the following regexp.\n\nconst someDirectEvalPattern = /\\beval\\s*(?:\\(|\\/[/*])/;\n\nfunction rejectSomeDirectEvalExpressions(s) {\n  const index = s.search(someDirectEvalPattern);\n  if (index !== -1) {\n    const linenum = s.slice(0, index).split('\\n').length; // more or less\n    throw new SyntaxError(\n      `possible direct eval expression rejected around line ${linenum}`\n    );\n  }\n}\n\nexport function rejectDangerousSources(s) {\n  rejectHtmlComments(s);\n  rejectImportExpressions(s);\n  rejectSomeDirectEvalExpressions(s);\n}\n\n// Export a rewriter transform.\nexport const rejectDangerousSourcesTransform = {\n  rewrite(rs) {\n    rejectDangerousSources(rs.src);\n    return rs;\n  }\n};\n","// Portions adapted from V8 - Copyright 2016 the V8 project authors.\n// https://github.com/v8/v8/blob/master/src/builtins/builtins-function.cc\n\nimport { assert, throwTantrum } from './utilities';\nimport {\n  apply,\n  arrayConcat,\n  arrayJoin,\n  arrayPop,\n  getPrototypeOf,\n  regexpTest,\n  stringIncludes\n} from './commons';\nimport { getOptimizableGlobals } from './optimizer';\nimport { buildScopeHandlerString } from './scopeHandler';\nimport { buildSafeEvalString } from './safeEval';\nimport { buildSafeFunctionString } from './safeFunction';\nimport { applyTransformsString } from './transforms';\nimport { rejectDangerousSourcesTransform } from './sourceParser';\n\nfunction buildOptimizer(constants) {\n  // No need to build an oprimizer when there are no constants.\n  if (constants.length === 0) return '';\n  // Use 'this' to avoid going through the scope proxy, which is unecessary\n  // since the optimizer only needs references to the safe global.\n  return `const {${arrayJoin(constants, ',')}} = this;`;\n}\n\nfunction createScopedEvaluatorFactory(unsafeRec, constants) {\n  const { unsafeFunction } = unsafeRec;\n\n  const optimizer = buildOptimizer(constants);\n\n  // Create a function in sloppy mode, so that we can use 'with'. It returns\n  // a function in strict mode that evaluates the provided code using direct\n  // eval, and thus in strict mode in the same scope. We must be very careful\n  // to not create new names in this scope\n\n  // 1: we use 'with' (around a Proxy) to catch all free variable names. The\n  // first 'arguments[0]' holds the Proxy which safely wraps the safeGlobal\n  // 2: 'optimizer' catches common variable names for speed\n  // 3: The inner strict function is effectively passed two parameters:\n  //    a) its arguments[0] is the source to be directly evaluated.\n  //    b) its 'this' is the this binding seen by the code being\n  //       directly evaluated.\n\n  // everything in the 'optimizer' string is looked up in the proxy\n  // (including an 'arguments[0]', which points at the Proxy). 'function' is\n  // a keyword, not a variable, so it is not looked up. then 'eval' is looked\n  // up in the proxy, that's the first time it is looked up after\n  // useUnsafeEvaluator is turned on, so the proxy returns the real the\n  // unsafeEval, which satisfies the IsDirectEvalTrap predicate, so it uses\n  // the direct eval and gets the lexical scope. The second 'arguments[0]' is\n  // looked up in the context of the inner function. The *contents* of\n  // arguments[0], because we're using direct eval, are looked up in the\n  // Proxy, by which point the useUnsafeEvaluator switch has been flipped\n  // back to 'false', so any instances of 'eval' in that string will get the\n  // safe evaluator.\n\n  return unsafeFunction(`\n    with (arguments[0]) {\n      ${optimizer}\n      return function() {\n        'use strict';\n        return eval(arguments[0]);\n      };\n    }\n  `);\n}\n\nexport function createSafeEvaluatorFactory(\n  unsafeRec,\n  safeGlobal,\n  transforms,\n  sloppyGlobals\n) {\n  const { unsafeEval } = unsafeRec;\n  const applyTransforms = unsafeEval(applyTransformsString);\n\n  function factory(endowments = {}, options = {}) {\n    // todo clone all arguments passed to returned function\n    const localTransforms = options.transforms || [];\n    const realmTransforms = transforms || [];\n\n    const mandatoryTransforms = [rejectDangerousSourcesTransform];\n    const allTransforms = arrayConcat(\n      localTransforms,\n      realmTransforms,\n      mandatoryTransforms\n    );\n\n    function safeEvalOperation(src) {\n      let rewriterState = { src, endowments };\n      rewriterState = applyTransforms(rewriterState, allTransforms);\n\n      // Combine all optimizable globals.\n      const globalConstants = getOptimizableGlobals(\n        safeGlobal,\n        rewriterState.endowments\n      );\n      const localConstants = getOptimizableGlobals(rewriterState.endowments);\n      const constants = arrayConcat(globalConstants, localConstants);\n\n      const scopedEvaluatorFactory = createScopedEvaluatorFactory(\n        unsafeRec,\n        constants\n      );\n\n      const scopeHandler = unsafeEval(buildScopeHandlerString)(\n        unsafeRec,\n        safeGlobal,\n        rewriterState.endowments,\n        sloppyGlobals\n      );\n      const scopeProxyRevocable = Proxy.revocable({}, scopeHandler);\n      const scopeProxy = scopeProxyRevocable.proxy;\n      const scopedEvaluator = apply(scopedEvaluatorFactory, safeGlobal, [\n        scopeProxy\n      ]);\n\n      scopeHandler.useUnsafeEvaluator = true;\n      let err;\n      try {\n        // Ensure that \"this\" resolves to the safe global.\n        return apply(scopedEvaluator, safeGlobal, [rewriterState.src]);\n      } catch (e) {\n        // stash the child-code error in hopes of debugging the internal failure\n        err = e;\n        throw e;\n      } finally {\n        if (scopeHandler.useUnsafeEvaluator) {\n          // the proxy switches this off immediately after ths\n          // first access, but if that's not the case we prevent\n          // further variable resolution on the scope and abort.\n          scopeProxyRevocable.revoke();\n          throwTantrum('handler did not revoke useUnsafeEvaluator', err);\n        }\n      }\n    }\n\n    return safeEvalOperation;\n  }\n\n  return factory;\n}\n\nexport function createSafeEvaluator(unsafeRec, safeEvalOperation) {\n  const { unsafeEval, unsafeFunction } = unsafeRec;\n\n  const safeEval = unsafeEval(buildSafeEvalString)(\n    unsafeRec,\n    safeEvalOperation\n  );\n\n  assert(getPrototypeOf(safeEval).constructor !== Function, 'hide Function');\n  assert(\n    getPrototypeOf(safeEval).constructor !== unsafeFunction,\n    'hide unsafeFunction'\n  );\n\n  return safeEval;\n}\n\nexport function createSafeEvaluatorWhichTakesEndowments(safeEvaluatorFactory) {\n  return (x, endowments, options = {}) =>\n    safeEvaluatorFactory(endowments, options)(x);\n}\n\n/**\n * A safe version of the native Function which relies on\n * the safety of evalEvaluator for confinement.\n */\nexport function createFunctionEvaluator(unsafeRec, safeEvalOperation) {\n  const { unsafeGlobal, unsafeEval, unsafeFunction } = unsafeRec;\n\n  function safeFunctionOperation(...params) {\n    const functionBody = `${arrayPop(params) || ''}`;\n    let functionParams = `${arrayJoin(params, ',')}`;\n    if (!regexpTest(/^[\\w\\s,]*$/, functionParams)) {\n      throw new SyntaxError(\n        'shim limitation: Function arg must be simple ASCII identifiers, possibly separated by commas: no default values, pattern matches, or non-ASCII parameter names'\n      );\n      // this protects against Matt Austin's clever attack:\n      // Function(\"arg=`\", \"/*body`){});({x: this/**/\")\n      // which would turn into\n      //     (function(arg=`\n      //     /*``*/){\n      //      /*body`){});({x: this/**/\n      //     })\n      // which parses as a default argument of `\\n/*``*/){\\n/*body` , which\n      // is a pair of template literals back-to-back (so the first one\n      // nominally evaluates to the parser to use on the second one), which\n      // can't actually execute (because the first literal evals to a string,\n      // which can't be a parser function), but that doesn't matter because\n      // the function is bypassed entirely. When that gets evaluated, it\n      // defines (but does not invoke) a function, then evaluates a simple\n      // {x: this} expression, giving access to the safe global.\n    }\n\n    // Is this a real functionBody, or is someone attempting an injection\n    // attack? This will throw a SyntaxError if the string is not actually a\n    // function body. We coerce the body into a real string above to prevent\n    // someone from passing an object with a toString() that returns a safe\n    // string the first time, but an evil string the second time.\n    // eslint-disable-next-line no-new, new-cap\n    new unsafeFunction(functionBody);\n\n    if (stringIncludes(functionParams, ')')) {\n      // If the formal parameters string include ) - an illegal\n      // character - it may make the combined function expression\n      // compile. We avoid this problem by checking for this early on.\n\n      // note: v8 throws just like this does, but chrome accepts\n      // e.g. 'a = new Date()'\n      throw new unsafeGlobal.SyntaxError(\n        'shim limitation: Function arg string contains parenthesis'\n      );\n      // todo: shim integrity threat if they change SyntaxError\n    }\n\n    // todo: check to make sure this .length is safe. markm says safe.\n    if (functionParams.length > 0) {\n      // If the formal parameters include an unbalanced block comment, the\n      // function must be rejected. Since JavaScript does not allow nested\n      // comments we can include a trailing block comment to catch this.\n      functionParams += '\\n/*``*/';\n    }\n\n    const src = `(function(${functionParams}){\\n${functionBody}\\n})`;\n\n    return safeEvalOperation(src);\n  }\n\n  const safeFunction = unsafeEval(buildSafeFunctionString)(\n    unsafeRec,\n    safeFunctionOperation\n  );\n\n  assert(\n    getPrototypeOf(safeFunction).constructor !== Function,\n    'hide Function'\n  );\n  assert(\n    getPrototypeOf(safeFunction).constructor !== unsafeFunction,\n    'hide unsafeFunction'\n  );\n\n  return safeFunction;\n}\n","import { buildChildRealm, buildChildRealmString } from './childRealm';\nimport { createNewUnsafeRec, createCurrentUnsafeRec } from './unsafeRec';\nimport {\n  createSafeEvaluatorFactory,\n  createSafeEvaluator,\n  createSafeEvaluatorWhichTakesEndowments,\n  createFunctionEvaluator\n} from './evaluators';\nimport { assert } from './utilities';\nimport { create, defineProperties, freeze, arrayConcat } from './commons';\n\n// Mimic private members on the realm instances.\n// We define it in the same module and do not export it.\nconst RealmRecForRealmInstance = new WeakMap();\n\nfunction getRealmRecForRealmInstance(realm) {\n  // Detect non-objects.\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\n  // Realm instance has no realmRec. Should not proceed.\n  assert(RealmRecForRealmInstance.has(realm), 'Realm instance has no record');\n\n  return RealmRecForRealmInstance.get(realm);\n}\n\nfunction registerRealmRecForRealmInstance(realm, realmRec) {\n  // Detect non-objects.\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\n  // Attempt to change an existing realmRec on a realm instance. Should not proceed.\n  assert(\n    !RealmRecForRealmInstance.has(realm),\n    'Realm instance already has a record'\n  );\n\n  RealmRecForRealmInstance.set(realm, realmRec);\n}\n\n// Initialize the global variables for the new Realm.\nfunction setDefaultBindings(safeGlobal, safeEval, safeFunction) {\n  defineProperties(safeGlobal, {\n    eval: {\n      value: safeEval,\n      writable: true,\n      configurable: true\n    },\n    Function: {\n      value: safeFunction,\n      writable: true,\n      configurable: true\n    }\n  });\n}\n\nfunction createRealmRec(unsafeRec, transforms, sloppyGlobals) {\n  const { sharedGlobalDescs, unsafeGlobal } = unsafeRec;\n\n  const safeGlobal = create(unsafeGlobal.Object.prototype, sharedGlobalDescs);\n\n  const safeEvaluatorFactory = createSafeEvaluatorFactory(\n    unsafeRec,\n    safeGlobal,\n    transforms,\n    sloppyGlobals\n  );\n  const safeEvalOperation = safeEvaluatorFactory();\n  const safeEval = createSafeEvaluator(unsafeRec, safeEvalOperation);\n  const safeFunction = createFunctionEvaluator(unsafeRec, safeEvalOperation);\n  const safeEvalWhichTakesEndowments = createSafeEvaluatorWhichTakesEndowments(\n    safeEvaluatorFactory\n  );\n\n  setDefaultBindings(safeGlobal, safeEval, safeFunction);\n\n  const realmRec = freeze({\n    safeGlobal,\n    safeEval,\n    safeEvalWhichTakesEndowments,\n    safeFunction\n  });\n\n  return realmRec;\n}\n\n/**\n * A root realm uses a fresh set of new intrinics. Here we first create\n * a new unsafe record, which inherits the shims. Then we proceed with\n * the creation of the realm record, and we apply the shims.\n */\nfunction initRootRealm(parentUnsafeRec, self, options) {\n  // note: 'self' is the instance of the Realm.\n\n  // todo: investigate attacks via Array.species\n  // todo: this accepts newShims='string', but it should reject that\n  const {\n    shims: newShims,\n    transforms,\n    sloppyGlobals,\n    configurableGlobals\n  } = options;\n  const allShims = arrayConcat(parentUnsafeRec.allShims, newShims);\n\n  // The unsafe record is created already repaired.\n  const unsafeRec = createNewUnsafeRec(allShims, configurableGlobals);\n  const { unsafeEval } = unsafeRec;\n\n  const Realm = unsafeEval(buildChildRealmString)(\n    unsafeRec,\n    // eslint-disable-next-line no-use-before-define\n    BaseRealm\n  );\n\n  // Add a Realm descriptor to sharedGlobalDescs, so it can be defined onto the\n  // safeGlobal like the rest of the globals.\n  unsafeRec.sharedGlobalDescs.Realm = {\n    value: Realm,\n    writable: true,\n    configurable: true\n  };\n\n  // Creating the realmRec provides the global object, eval() and Function()\n  // to the realm.\n  const realmRec = createRealmRec(unsafeRec, transforms, sloppyGlobals);\n\n  // Apply all shims in the new RootRealm. We don't do this for compartments.\n  const { safeEvalWhichTakesEndowments } = realmRec;\n  for (const shim of allShims) {\n    safeEvalWhichTakesEndowments(shim);\n  }\n\n  // The realmRec acts as a private field on the realm instance.\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\n/**\n * A compartment shares the intrinsics of its root realm. Here, only a\n * realmRec is necessary to hold the global object, eval() and Function().\n */\nfunction initCompartment(unsafeRec, self, options = {}) {\n  // note: 'self' is the instance of the Realm.\n\n  const { transforms, sloppyGlobals } = options;\n  const realmRec = createRealmRec(unsafeRec, transforms, sloppyGlobals);\n\n  // The realmRec acts as a private field on the realm instance.\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\nfunction getRealmGlobal(self) {\n  const { safeGlobal } = getRealmRecForRealmInstance(self);\n  return safeGlobal;\n}\n\nfunction realmEvaluate(self, x, endowments = {}, options = {}) {\n  // todo: don't pass in primal-realm objects like {}, for safety. OTOH its\n  // properties are copied onto the new global 'target'.\n  // todo: figure out a way to membrane away the contents to safety.\n  const { safeEvalWhichTakesEndowments } = getRealmRecForRealmInstance(self);\n  return safeEvalWhichTakesEndowments(x, endowments, options);\n}\n\nconst BaseRealm = {\n  initRootRealm,\n  initCompartment,\n  getRealmGlobal,\n  realmEvaluate\n};\n\n// Create the current unsafeRec from the current \"primal\" environment (the realm\n// where the Realm shim is loaded and executed).\nconst currentUnsafeRec = createCurrentUnsafeRec();\n\n/**\n * The \"primal\" realm class is defined in the current \"primal\" environment,\n * and is part of the shim. There is no need to facade this class via evaluation\n * because both share the same intrinsics.\n */\nconst Realm = buildChildRealm(currentUnsafeRec, BaseRealm);\n\nexport default Realm;\n"],"names":["throwTantrum","s","err","msg","console","error","stack","assert","condition","message","safeStringifyFunction","fn","src","replace","buildChildRealm","unsafeRec","BaseRealm","callAndWrapError","initRootRealm","initCompartment","getRealmGlobal","realmEvaluate","create","defineProperties","Object","Realm","constructor","TypeError","makeRootRealm","options","r","prototype","makeCompartment","global","evaluate","x","endowments","toString","value","writable","enumerable","configurable","buildChildRealmString","buildCallAndWrapError","getPrototypeOf","apply","Reflect","uncurryThis","thisArg","args","mapGet","Map","get","setHas","Set","has","errorNameToErrorConstructor","EvalError","RangeError","ReferenceError","SyntaxError","URIError","errorConstructors","Error","target","eName","eMessage","eStack","name","ignored","ErrorConstructor","err2","buildCallAndWrapErrorString","assign","freeze","getOwnPropertyDescriptor","getOwnPropertyDescriptors","getOwnPropertyNames","setPrototypeOf","ownKeys","objectHasOwnProperty","hasOwnProperty","arrayFilter","Array","filter","arrayPop","pop","arrayJoin","join","arrayConcat","concat","regexpTest","RegExp","test","stringIncludes","String","includes","frozenGlobalPropertyNames","stableGlobalPropertyNames","unstableGlobalPropertyNames","getSharedGlobalDescs","unsafeGlobal","configurableGlobals","describe","names","desc","descriptors","repairAccessors","asPropertyName","obj","aFunction","accessor","defineProperty","objectPrototype","__lookupGetter__","ignore","toObject","valueOf","__defineGetter__","__defineSetter__","__lookupSetter__","prop","func","O","set","repairFunctions","repairFunction","declaration","FunctionInstance","eval","e","FunctionPrototype","TamedFunction","Function","unsafeGlobalSrc","unsafeGlobalEvalSrc","createNewUnsafeGlobalForNode","isNode","vm","require","runInNewContext","createNewUnsafeGlobalForBrowser","document","iframe","createElement","style","display","body","appendChild","contentWindow","getNewUnsafeGlobal","newUnsafeGlobalForBrowser","newUnsafeGlobalForNode","createUnsafeRec","allShims","sharedGlobalDescs","unsafeEval","unsafeFunction","repairAccessorsString","repairFunctionsString","createNewUnsafeRec","createCurrentUnsafeRec","identifierPattern","keywords","getOptimizableGlobals","globalObject","localObject","globalNames","constants","buildScopeHandler","safeGlobal","sloppyGlobals","reflectGet","reflectSet","alwaysThrowHandler","Proxy","__proto__","useUnsafeEvaluator","shadow","buildScopeHandlerString","buildSafeEval","safeEvalOperation","safeEval","arguments","buildSafeEvalString","buildSafeFunction","safeFunctionOperation","safeFunction","buildSafeFunctionString","applyTransforms","rewriterState","transforms","arrayReduce","reduce","rs","transform","rewrite","applyTransformsString","htmlCommentPattern","rejectHtmlComments","index","search","linenum","slice","split","length","importPattern","allowedImportPrefix","rejectImportExpressions","nextMatch","match","someDirectEvalPattern","rejectSomeDirectEvalExpressions","rejectDangerousSources","rejectDangerousSourcesTransform","buildOptimizer","createScopedEvaluatorFactory","optimizer","createSafeEvaluatorFactory","localTransforms","allTransforms","globalConstants","localConstants","scopedEvaluatorFactory","scopeHandler","scopeProxyRevocable","revocable","scopeProxy","proxy","scopedEvaluator","revoke","createSafeEvaluator","createSafeEvaluatorWhichTakesEndowments","safeEvaluatorFactory","createFunctionEvaluator","params","functionBody","functionParams","RealmRecForRealmInstance","WeakMap","getRealmRecForRealmInstance","realm","registerRealmRecForRealmInstance","realmRec","setDefaultBindings","createRealmRec","safeEvalWhichTakesEndowments","parentUnsafeRec","self","shims","newShims","shim","currentUnsafeRec"],"mappings":"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"}